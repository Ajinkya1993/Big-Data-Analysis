{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 %spark2.spark\
\
//SAMPLE CODE TO LOAD ALL FILES INTO DATAFRAMES AND JOIN AND VISUALISE\
\
val path = "/tmp/train.csv"\
\
val oritraindata = spark.read.csv(path)\
val traincolnames = Seq("id", "prod_uid", "title", "search", "rel")\
val traindata = oritraindata.toDF(traincolnames: _*)\
//traindata.show()\
traindata.createOrReplaceTempView("traindata")\
\
val path2 = "/tmp/product_descriptions.csv"\
val oriprod_desc = spark.read.csv(path2)\
val newnames = Seq("prod_id", "desc")\
val prod_desc = oriprod_desc.toDF(newnames: _*)\
//prod_desc2.printSchema()\
//traindata.show()\
prod_desc.createOrReplaceTempView("prod_desc")\
\
val path3 = "/tmp/test.csv"\
val oritestdata = spark.read.csv(path3)\
//oritestdata.show()\
val testcolnames = Seq("id", "prod_uid", "title", "search")\
val testdata = oritestdata.toDF(testcolnames: _*)\
testdata.show()\
testdata.createOrReplaceTempView("testdata")\
\
val columnNames = Seq("prod_uid","title","search","rel", "desc")\
\
val joined_df = traindata.join(prod_desc, col("prod_id") === col("prod_uid"), "inner").select(columnNames.head, columnNames.tail: _*)\
joined_df.show()}